generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  firstName                 String
  lastName                  String
  email                     String    @unique
  phone                     String
  photo                     String
  blurHash                  String?
  password                  String?
  role                      UserRole  @default(USER)
  createBySchoolId          String?   @db.ObjectId
  isVerifyEmail             Boolean   @default(false)
  verifyEmailToken          String?
  verifyEmailTokenExpiresAt DateTime?

  language Language @default(en)

  lastActiveAt                DateTime
  isResetPassword             Boolean   @default(false)
  provider                    Provider
  providerId                  String?
  isDeleted                   Boolean   @default(false)
  deleteAt                    DateTime?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?

  memberOnSchools          MemberOnSchool[]
  subjects                 Subject[]
  memberOnTeams            MemberOnTeam[]
  teacherOnSubjects        TeacherOnSubject[]
  schools                  School[]
  assignments              Assignment[]
  commentOnAssignments     CommentOnAssignment[]
  SubscriptionNotification SubscriptionNotification[]
  feedbacks                Feedback[]
  classes                  Class[]
}

enum Language {
  en
  th
}

model SubscriptionNotification {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  data      Json
  endpoint  String
  userAgent String
  expiredAt DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([endpoint, userId])
}

model School {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  plan        Plan    @default(FREE)
  isDeleted   Boolean @default(false)

  country String
  city    String
  address String
  zipCode String

  logo     String
  blurHash String?

  phoneNumber String

  totalStorage Float @default(0)

  limitSchoolMember  Int   @default(2)
  limitClassNumber   Int   @default(3)
  limitSubjectNumber Int   @default(3)
  limitTotalStorage  Float @default(16106127360)

  stripe_customer_id           String    @unique
  stripe_price_id              String?
  stripe_subscription_id       String?
  stripe_subscription_expireAt DateTime?

  billingManagerId String? @db.ObjectId
  billingManager   User?   @relation(fields: [billingManagerId], references: [id])

  memberOnSchools          MemberOnSchool[]
  classes                  Class[]
  teams                    Team[]
  students                 Student[]
  subjects                 Subject[]
  memberOnTeams            MemberOnTeam[]
  assignments              Assignment[]
  studentOnAssignments     StudentOnAssignment[]
  attendanceRows           AttendanceRow[]
  attendances              Attendance[]
  teacherOnSubjects        TeacherOnSubject[]
  attendanceTables         AttendanceTable[]
  scoreOnStudents          ScoreOnStudent[]
  scoreOnSubjects          ScoreOnSubject[]
  fileOnAssignments        FileOnAssignment[]
  studentOnSubjects        StudentOnSubject[]
  boards                   Board[]
  colums                   Colum[]
  tasks                    Task[]
  fileOnStudentAssignments FileOnStudentAssignment[]
  commentOnAssignments     CommentOnAssignment[]
  attendanceStatusLists    AttendanceStatusList[]
  gradeRanges              GradeRange[]
  groupOnSubjects          GroupOnSubject[]
  unitOnGroups             UnitOnGroup[]
  studentOnGroups          StudentOnGroup[]
}

model MemberOnSchool {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status Status     @default(PENDDING)
  role   MemberRole @default(TEACHER)

  firstName String
  lastName  String
  email     String
  photo     String
  blurHash  String?
  phone     String

  userId   String @db.ObjectId
  schoolId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  memberOnTeams MemberOnTeam[]

  @@unique([userId, schoolId])
}

model Class {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  level       String
  description String?
  order       Int?
  isAchieved  Boolean @default(false)
  isLocked    Boolean @default(false)

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  subjects          Subject[]
  students          Student[]
  studentOnSubjects StudentOnSubject[]

  @@index([schoolId])
}

model Student {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  photo     String
  blurHash  String?
  number    String
  password  String?

  schoolId                  String                     @db.ObjectId
  classId                   String                     @db.ObjectId
  school                    School                     @relation(fields: [schoolId], references: [id])
  class                     Class                      @relation(fields: [classId], references: [id])
  studentOnSubjects         StudentOnSubject[]
  studentOnAssignments      StudentOnAssignment[]
  commentOnAssignments      CommentOnAssignment[]
  scoreOnStudents           ScoreOnStudent[]
  attendances               Attendance[]
  fileOnStudentAssignments  FileOnStudentAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]
  studentOnGroups           StudentOnGroup[]

  @@index([schoolId, classId])
}

model Team {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?
  icon        String

  schoolId      String         @db.ObjectId
  school        School         @relation(fields: [schoolId], references: [id])
  memberOnTeams MemberOnTeam[]
  boards        Board[]
  colums        Colum[]
  tasks         Task[]
}

model MemberOnTeam {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status    Status     @default(PENDDING)
  role      MemberRole @default(TEACHER)
  firstName String
  lastName  String
  email     String
  photo     String
  blurHash  String?
  phone     String

  userId           String @db.ObjectId
  memberOnSchoolId String @db.ObjectId
  teamId           String @db.ObjectId
  schoolId         String @db.ObjectId

  user           User           @relation(fields: [userId], references: [id])
  memberOnSchool MemberOnSchool @relation(fields: [memberOnSchoolId], references: [id])
  team           Team           @relation(fields: [teamId], references: [id])
  school         School         @relation(fields: [schoolId], references: [id])
  tasks          Task[]

  @@unique([userId, teamId])
}

model Subject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title         String
  educationYear String
  description   String
  order         Int?
  code          String @unique

  backgroundImage String?
  blurHash        String?
  wheelOfNamePath String?

  allowStudentDeleteWork       Boolean @default(true)
  allowStudentViewOverallScore Boolean @default(false)
  allowStudentViewGrade        Boolean @default(false)
  allowStudentViewAttendance   Boolean @default(true)
  isLocked                     Boolean @default(false)

  classId  String  @db.ObjectId
  userId   String? @db.ObjectId
  schoolId String  @db.ObjectId

  class  Class  @relation(fields: [classId], references: [id])
  user   User?  @relation(fields: [userId], references: [id])
  school School @relation(fields: [schoolId], references: [id])

  studentOnSubjects         StudentOnSubject[]
  assignments               Assignment[]
  scoreOnSubjects           ScoreOnSubject[]
  attendanceRows            AttendanceRow[]
  teacherOnSubjects         TeacherOnSubject[]
  attendanceTables          AttendanceTable[]
  attendances               Attendance[]
  scoreOnStudents           ScoreOnStudent[]
  fileOnAssignments         FileOnAssignment[]
  studentOnAssignments      StudentOnAssignment[]
  fileOnStudentAssignments  FileOnStudentAssignment[]
  commentOnAssignments      CommentOnAssignment[]
  skillOnAssignments        SkillOnAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]
  attendanceStatusLists     AttendanceStatusList[]
  gradeRanges               GradeRange[]
  groupOnSubjects           GroupOnSubject[]
  unitOnGroups              UnitOnGroup[]
  studentOnGroups           StudentOnGroup[]

  @@index([educationYear, schoolId])
}

model TeacherOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  status    Status     @default(PENDDING)
  role      MemberRole @default(TEACHER)
  firstName String
  lastName  String
  email     String
  photo     String
  blurHash  String?
  phone     String

  userId    String @db.ObjectId
  subjectId String @db.ObjectId
  schoolId  String @db.ObjectId

  user                 User                  @relation(fields: [userId], references: [id])
  subject              Subject               @relation(fields: [subjectId], references: [id])
  school               School                @relation(fields: [schoolId], references: [id])
  commentOnAssignments CommentOnAssignment[]

  @@unique([userId, subjectId])
}

model StudentOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  photo     String
  blurHash  String?

  number String

  totalSpeicalScore Float @default(0)

  studentId String @db.ObjectId
  classId   String @db.ObjectId
  subjectId String @db.ObjectId
  schoolId  String @db.ObjectId
  order     Int?

  isActive Boolean @default(true)

  school               School                @relation(fields: [schoolId], references: [id])
  class                Class                 @relation(fields: [classId], references: [id])
  subject              Subject               @relation(fields: [subjectId], references: [id])
  student              Student               @relation(fields: [studentId], references: [id])
  studentOnAssignments StudentOnAssignment[]
  scoreOnStudents      ScoreOnStudent[]
  attendances          Attendance[]
  studentOnGroups      StudentOnGroup[]

  @@unique([studentId, subjectId])
}

model GroupOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?

  subjectId       String           @db.ObjectId
  subject         Subject          @relation(fields: [subjectId], references: [id])
  schoolId        String           @db.ObjectId
  school          School           @relation(fields: [schoolId], references: [id])
  unitOnGroups    UnitOnGroup[]
  studentOnGroups StudentOnGroup[]
}

model UnitOnGroup {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  icon        String
  title       String
  description String?
  totalScore  Float   @default(0)
  order       Int?

  groupOnSubjectId String           @db.ObjectId
  groupOnSubject   GroupOnSubject   @relation(fields: [groupOnSubjectId], references: [id])
  subjectId        String           @db.ObjectId
  subject          Subject          @relation(fields: [subjectId], references: [id])
  schoolId         String           @db.ObjectId
  school           School           @relation(fields: [schoolId], references: [id])
  studentOnGroups  StudentOnGroup[]
}

model StudentOnGroup {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  photo     String
  blurHash  String?
  number    String
  order     Int?

  unitOnGroupId      String           @db.ObjectId
  unitOnGroup        UnitOnGroup      @relation(fields: [unitOnGroupId], references: [id])
  studentId          String           @db.ObjectId
  student            Student          @relation(fields: [studentId], references: [id])
  studentOnSubjectId String           @db.ObjectId
  studentOnSubject   StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])
  groupOnSubjectId   String           @db.ObjectId
  groupOnSubject     GroupOnSubject   @relation(fields: [groupOnSubjectId], references: [id])
  subjectId          String           @db.ObjectId
  subject            Subject          @relation(fields: [subjectId], references: [id])
  schoolId           String           @db.ObjectId
  school             School           @relation(fields: [schoolId], references: [id])

  @@unique([studentOnSubjectId, unitOnGroupId])
  @@unique([studentOnSubjectId, groupOnSubjectId])
}

model Assignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  maxScore    Float?
  weight      Float?
  order       Int?

  status AssignmentStatus @default(Draft)

  type AssignmentType

  beginDate DateTime
  dueDate   DateTime?

  vector        Float[]
  vectorResouce String?

  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  fileOnAssignments        FileOnAssignment[]
  studentOnAssignments     StudentOnAssignment[]
  skillOnAssignments       SkillOnAssignment[]
  fileOnStudentAssignments FileOnStudentAssignment[]

  @@index([subjectId])
}

enum AssignmentType {
  Assignment
  Material
}

enum AssignmentStatus {
  Published
  Draft
}

model FileOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  type     String
  blurHash String?
  url      String
  size     Float

  subjectId    String     @db.ObjectId
  subject      Subject    @relation(fields: [subjectId], references: [id])
  schoolId     String     @db.ObjectId
  school       School     @relation(fields: [schoolId], references: [id])
  assignmentId String     @db.ObjectId
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  @@index([assignmentId, url])
}

model StudentOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title     String
  firstName String
  lastName  String
  photo     String
  blurHash  String?

  number String

  score       Float?
  body        String?
  completedAt DateTime?
  reviewdAt   DateTime?
  isAssigned  Boolean                 @default(false)
  status      StudentAssignmentStatus @default(PENDDING)

  studentId          String @db.ObjectId
  assignmentId       String @db.ObjectId
  studentOnSubjectId String @db.ObjectId
  schoolId           String @db.ObjectId
  subjectId          String @db.ObjectId

  subject          Subject          @relation(fields: [subjectId], references: [id])
  school           School           @relation(fields: [schoolId], references: [id])
  student          Student          @relation(fields: [studentId], references: [id])
  assignment       Assignment       @relation(fields: [assignmentId], references: [id])
  studentOnSubject StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])

  fileOnStudentAssignments  FileOnStudentAssignment[]
  commentOnAssignments      CommentOnAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]

  @@unique([studentOnSubjectId, assignmentId])
}

enum StudentAssignmentStatus {
  PENDDING
  SUBMITTED
  IMPROVED
  REVIEWD
}

model GradeRange {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  gradeRules Json // Store grading rules as JSON (e.g., [{ min: 70, max: 80, grade: "B" }])
  subjectId  String  @unique @db.ObjectId
  subject    Subject @relation(fields: [subjectId], references: [id])
  schoolId   String  @db.ObjectId
  school     School  @relation(fields: [schoolId], references: [id])
}

model FileOnStudentAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  type        String
  blurHash    String?
  body        String
  name        String?
  size        Float?
  contentType StudentAssignmentContentType

  subjectId             String              @db.ObjectId
  subject               Subject             @relation(fields: [subjectId], references: [id])
  schoolId              String              @db.ObjectId
  school                School              @relation(fields: [schoolId], references: [id])
  assignmentId          String              @db.ObjectId
  assignment            Assignment          @relation(fields: [assignmentId], references: [id])
  studentId             String              @db.ObjectId
  student               Student             @relation(fields: [studentId], references: [id])
  studentOnAssignmentId String              @db.ObjectId
  studentOnAssignment   StudentOnAssignment @relation(fields: [studentOnAssignmentId], references: [id])

  @@index([studentOnAssignmentId])
}

enum StudentAssignmentContentType {
  TEXT
  FILE
}

model CommentOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  content String

  title     String
  firstName String
  lastName  String
  photo     String?
  blurHash  String?
  number    String?

  status Status?
  role   MemberRole?
  email  String?
  phone  String?

  subjectId             String              @db.ObjectId
  subject               Subject             @relation(fields: [subjectId], references: [id])
  schoolId              String              @db.ObjectId
  school                School              @relation(fields: [schoolId], references: [id])
  studentId             String?             @db.ObjectId
  student               Student?            @relation(fields: [studentId], references: [id])
  studentOnAssignmentId String              @db.ObjectId
  studentOnAssignment   StudentOnAssignment @relation(fields: [studentOnAssignmentId], references: [id])
  teacherOnSubjectId    String?             @db.ObjectId
  teacherOnSubject      TeacherOnSubject?   @relation(fields: [teacherOnSubjectId], references: [id])
  userId                String?             @db.ObjectId
  user                  User?               @relation(fields: [userId], references: [id])

  @@index([studentOnAssignmentId])
}

model ScoreOnSubject {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  score     Float
  title     String
  icon      String
  blurHash  String?
  isDeleted Boolean @default(false)

  schoolId  String  @db.ObjectId
  school    School  @relation(fields: [schoolId], references: [id])
  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  scoreOnStudents ScoreOnStudent[]

  @@index([subjectId])
}

model ScoreOnStudent {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  score    Float
  blurHash String?
  title    String
  icon     String

  subjectId          String           @db.ObjectId
  subject            Subject          @relation(fields: [subjectId], references: [id])
  scoreOnSubjectId   String           @db.ObjectId
  scoreOnSubject     ScoreOnSubject   @relation(fields: [scoreOnSubjectId], references: [id])
  schoolId           String           @db.ObjectId
  school             School           @relation(fields: [schoolId], references: [id])
  studentId          String           @db.ObjectId
  student            Student          @relation(fields: [studentId], references: [id])
  studentOnSubjectId String           @db.ObjectId
  studentOnSubject   StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])

  @@index([subjectId, studentOnSubjectId])
}

model AttendanceTable {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?
  subjectId   String  @db.ObjectId
  subject     Subject @relation(fields: [subjectId], references: [id])

  schoolId              String                 @db.ObjectId
  school                School                 @relation(fields: [schoolId], references: [id])
  attendances           Attendance[]
  attendanceRows        AttendanceRow[]
  attendanceStatusLists AttendanceStatusList[]

  @@index([subjectId])
}

model AttendanceStatusList {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title String
  value Int
  color String

  isHidden Boolean @default(false)

  attendanceTableId String          @db.ObjectId
  attendanceTable   AttendanceTable @relation(fields: [attendanceTableId], references: [id])
  schoolId          String          @db.ObjectId
  school            School          @relation(fields: [schoolId], references: [id])
  subjectId         String          @db.ObjectId
  subject           Subject         @relation(fields: [subjectId], references: [id])

  @@unique([title, attendanceTableId])
}

model AttendanceRow {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime
  note      String?

  expireAt            DateTime?
  allowScanAt         DateTime?
  isAllowScanManyTime Boolean?
  type                AttendanceType @default(NORMAL)

  attendanceTableId String          @db.ObjectId
  attendanceTable   AttendanceTable @relation(fields: [attendanceTableId], references: [id])
  subjectId         String          @db.ObjectId
  subject           Subject         @relation(fields: [subjectId], references: [id])

  schoolId    String       @db.ObjectId
  school      School       @relation(fields: [schoolId], references: [id])
  attendances Attendance[]

  @@index([subjectId, attendanceTableId])
}

enum AttendanceType {
  NORMAL
  SCAN
}

model Attendance {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  startDate DateTime
  endDate   DateTime

  status String  @default("UNKNOW")
  note   String?

  attendanceTableId  String           @db.ObjectId
  attendanceTable    AttendanceTable  @relation(fields: [attendanceTableId], references: [id])
  studentId          String           @db.ObjectId
  student            Student          @relation(fields: [studentId], references: [id])
  attendanceRowId    String           @db.ObjectId
  attendanceRow      AttendanceRow    @relation(fields: [attendanceRowId], references: [id])
  studentOnSubjectId String           @db.ObjectId
  studentOnSubject   StudentOnSubject @relation(fields: [studentOnSubjectId], references: [id])

  schoolId  String  @db.ObjectId
  school    School  @relation(fields: [schoolId], references: [id])
  subjectId String  @db.ObjectId
  subject   Subject @relation(fields: [subjectId], references: [id])

  @@unique([studentOnSubjectId, attendanceRowId])
  @@index([attendanceTableId])
}

model Skill {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  keywords    String
  vector      Float[]

  skillOnAssignments        SkillOnAssignment[]
  skillOnStudentAssignments SkillOnStudentAssignment[]
  skillOnCareers            SkillOnCareer[]
}

model SkillOnAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  skillId      String @db.ObjectId
  assignmentId String @db.ObjectId
  subjectId    String @db.ObjectId

  subject    Subject    @relation(fields: [subjectId], references: [id])
  skill      Skill      @relation(fields: [skillId], references: [id])
  assignment Assignment @relation(fields: [assignmentId], references: [id])

  @@unique([skillId, assignmentId])
}

model SkillOnStudentAssignment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  weight Float

  subjectId             String              @db.ObjectId
  subject               Subject             @relation(fields: [subjectId], references: [id])
  skillId               String              @db.ObjectId
  skill                 Skill               @relation(fields: [skillId], references: [id])
  studentId             String              @db.ObjectId
  student               Student             @relation(fields: [studentId], references: [id])
  studentOnAssignmentId String              @db.ObjectId
  studentOnAssignment   StudentOnAssignment @relation(fields: [studentOnAssignmentId], references: [id])

  @@unique([skillId, studentOnAssignmentId])
}

model Career {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?
  keywords    String?

  skillOnCareers SkillOnCareer[]
}

model SkillOnCareer {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  weight Float

  skillId  String @db.ObjectId
  careerId String @db.ObjectId

  skill  Skill  @relation(fields: [skillId], references: [id])
  career Career @relation(fields: [careerId], references: [id])

  @@unique([skillId, careerId])
}

model Board {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  isCompleted Boolean @default(false)

  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id])

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  colums Colum[]
  tasks  Task[]
}

model Colum {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?
  color       String

  teamId   String @db.ObjectId
  team     Team   @relation(fields: [teamId], references: [id])
  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])
  boardId  String @db.ObjectId
  board    Board  @relation(fields: [boardId], references: [id])

  tasks Task[]
}

model Task {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String?
  deadline    DateTime?
  isCompleted Boolean   @default(false)

  assigneeId String?       @db.ObjectId
  assignee   MemberOnTeam? @relation(fields: [assigneeId], references: [id])

  teamId String @db.ObjectId
  team   Team   @relation(fields: [teamId], references: [id])

  schoolId String @db.ObjectId
  school   School @relation(fields: [schoolId], references: [id])

  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id])

  columId String @db.ObjectId
  colum   Colum  @relation(fields: [columId], references: [id])
}

model TeachingMaterial {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  title       String
  description String
  thumbnail   String?
  tags        String[]
  accessLevel Plan     @default(PREMIUM)

  vector                  Float[]
  fileOnTeachingMaterials FileOnTeachingMaterial[]
}

model FileOnTeachingMaterial {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  url                String
  type               String
  size               Float
  teachingMaterialId String           @db.ObjectId
  teachingMaterial   TeachingMaterial @relation(fields: [teachingMaterialId], references: [id])
}

model Feedback {
  id        String      @id @default(uuid()) @map("_id")
  title     String
  body      String
  tag       FeedbackTag
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("feedbacks")
}

enum UserRole {
  ADMIN
  USER
}

enum MemberRole {
  ADMIN
  TEACHER
}

enum Plan {
  FREE
  PREMIUM
  ENTERPRISE
}

enum Provider {
  LOCAL
  GOOGLE
}

enum Status {
  PENDDING
  ACCEPT
  REJECT
}

enum FeedbackTag {
  COMPLIMENT
  BUG
  REQUEST_FEATURE
}
